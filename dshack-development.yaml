# PostgreSQL (StatefulSet + HeadlessService)
# 開発時には外部のkubernetesクラスター外からもアクセスしたいので、NodePort Serviceも定義する
apiVersion: v1
kind: Service
metadata:
  namespace: dshack-development
  name: postgres-svc
  labels:
    app: postgres-sts
spec:
  ports:
  - port: 5432
    name: postgres
  clusterIP: None
  selector:
    app: postgres-sts
---
apiVersion: v1
kind: Service
metadata:
  namespace: dshack-development
  name: postgres-node-svc
  labels:
    app: postgres-sts
spec:
  type: NodePort
  ports:
  - port: 5432
    nodePort: 30010
  selector:
    app: postgres-sts
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: dshack-development
  name: postgres-sts
spec:
  serviceName: postgres-svc
  replicas: 1
  selector:
    matchLabels:
      app: postgres-sts
  template:
    metadata:
      labels:
        app: postgres-sts
    spec:
      containers:
      - name: postgres
        image: postgres:12.1
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: dbname
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - name: postgres-pvc
          mountPath: /var/lib/postgresql/data
          subPath: postgres
  volumeClaimTemplates:
  - metadata:
      name: postgres-pvc
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: standard
      resources:
        requests:
          storage: 1Gi
---
# PostgreSQL Testing DB (StatefulSet + HeadlessService)
apiVersion: v1
kind: Service
metadata:
  namespace: dshack-development
  name: postgres-test-svc
  labels:
    app: postgres-test-sts
spec:
  ports:
  - port: 5432
    name: postgres
  clusterIP: None
  selector:
    app: postgres-test-sts
---
apiVersion: v1
kind: Service
metadata:
  namespace: dshack-development
  name: postgres-test-node-svc
  labels:
    app: postgres-test-sts
spec:
  type: NodePort
  ports:
  - port: 5432
    nodePort: 30011
  selector:
    app: postgres-test-sts
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: dshack-development
  name: postgres-test-sts
spec:
  serviceName: postgres-test-svc
  replicas: 1
  selector:
    matchLabels:
      app: postgres-test-sts
  template:
    metadata:
      labels:
        app: postgres-test-sts
    spec:
      containers:
      - name: postgres
        image: postgres:12.1
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: testdbname
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - name: postgres-test-pvc
          mountPath: /var/lib/postgresql/data
          subPath: postgres
  volumeClaimTemplates:
  - metadata:
      name: postgres-test-pvc
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: standard
      resources:
        requests:
          storage: 1Gi
# ---
# TODO: SchemaSpy
# apiVersion: v1
# kind: Service
# metadata:
#   namespace: dshack-development
#   name: schemaspy-svc
#   labels:
#     app: schemaspy-dashboard
# spec:
#   type: NodePort
#   ports:
#   - port: 8080
#     targetPort: 80
#     nodePort: 30080
#   selector:
#     app: schemaspy-dashboard
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   namespace: dshack-development
#   name: schemaspy-pvc
# spec:
#   accessModes:
#     - ReadWriteOnce
#   volumeMode: Filesystem
#   resources:
#     requests:
#       storage: 0.5Gi
#   storageClassName: standard
---
# DB migration job
# Pytest all test job(CI)
# Pytest smoke test job(CI)